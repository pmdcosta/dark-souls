// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "souls": saves Resource Client
//
// Command:
// $ goagen
// --design=github.com/pmdcosta/dark-souls/design
// --out=$(GOPATH)/src/github.com/pmdcosta/dark-souls
// --version=v1.2.0-dirty

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// LoadSavesPath computes a request path to the load action of saves.
func LoadSavesPath() string {

	return fmt.Sprintf("/load")
}

// Loads the last saved file.
func (c *Client) LoadSaves(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewLoadSavesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewLoadSavesRequest create the request corresponding to the load action endpoint of the saves resource.
func (c *Client) NewLoadSavesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// SaveSavesPath computes a request path to the save action of saves.
func SaveSavesPath() string {

	return fmt.Sprintf("/save")
}

// Backups the current save file.
func (c *Client) SaveSaves(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewSaveSavesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSaveSavesRequest create the request corresponding to the save action endpoint of the saves resource.
func (c *Client) NewSaveSavesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// StartSavesPath computes a request path to the start action of saves.
func StartSavesPath() string {

	return fmt.Sprintf("/start")
}

// Starts automatically saving the game every few seconds.
func (c *Client) StartSaves(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewStartSavesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewStartSavesRequest create the request corresponding to the start action endpoint of the saves resource.
func (c *Client) NewStartSavesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// StopSavesPath computes a request path to the stop action of saves.
func StopSavesPath() string {

	return fmt.Sprintf("/stop")
}

// Stops automatically saving the game.
func (c *Client) StopSaves(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewStopSavesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewStopSavesRequest create the request corresponding to the stop action endpoint of the saves resource.
func (c *Client) NewStopSavesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
