// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "souls": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/pmdcosta/dark-souls/design
// --out=$(GOPATH)/src/github.com/pmdcosta/dark-souls
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// PublicController is the controller interface for the Public actions.
type PublicController interface {
	goa.Muxer
	goa.FileServer
}

// MountPublicController "mounts" a Public resource controller on the given service.
func MountPublicController(service *goa.Service, ctrl PublicController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/ui", ctrl.MuxHandler("preflight", handlePublicOrigin(cors.HandlePreflight()), nil))

	h = ctrl.FileHandler("/ui", "public/index.html")
	h = handlePublicOrigin(h)
	service.Mux.Handle("GET", "/ui", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Public", "files", "public/index.html", "route", "GET /ui")
}

// handlePublicOrigin applies the CORS response headers corresponding to the origin.
func handlePublicOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// SavesController is the controller interface for the Saves actions.
type SavesController interface {
	goa.Muxer
	Load(*LoadSavesContext) error
	Save(*SaveSavesContext) error
	Start(*StartSavesContext) error
	Stop(*StopSavesContext) error
}

// MountSavesController "mounts" a Saves resource controller on the given service.
func MountSavesController(service *goa.Service, ctrl SavesController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewLoadSavesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Load(rctx)
	}
	service.Mux.Handle("GET", "/load", ctrl.MuxHandler("load", h, nil))
	service.LogInfo("mount", "ctrl", "Saves", "action", "Load", "route", "GET /load")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSaveSavesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Save(rctx)
	}
	service.Mux.Handle("GET", "/save", ctrl.MuxHandler("save", h, nil))
	service.LogInfo("mount", "ctrl", "Saves", "action", "Save", "route", "GET /save")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewStartSavesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Start(rctx)
	}
	service.Mux.Handle("GET", "/start", ctrl.MuxHandler("start", h, nil))
	service.LogInfo("mount", "ctrl", "Saves", "action", "Start", "route", "GET /start")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewStopSavesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Stop(rctx)
	}
	service.Mux.Handle("GET", "/stop", ctrl.MuxHandler("stop", h, nil))
	service.LogInfo("mount", "ctrl", "Saves", "action", "Stop", "route", "GET /stop")
}
